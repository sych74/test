type: install
jpsVersion: '1.7.2'
name: Multi-Regional WordPress Cluster Test
id: wordpress-cluster-multiregions-test
categories:
  - apps/clusters
  - apps/content-management
description: 
  text: Highly-available and reliable WordPress cluster setup with multi-regional distribution. 
    The package creates interconnected WordPress instances (sub clusters) across several availability zones ensuring the highest uptime and lowest latency.
  short: Enterprise-grade WordPress Cluster with servers in multiple regions.
logo: https://raw.githubusercontent.com/sych74/wordpress-multiregions/master/images/82dark-back-01.svg
baseUrl: https://raw.githubusercontent.com/sych74/test/master/cdn


settings:
  fields:
    - caption: Regions
      type: regionlist
      name: regions
      disableInactive: true
      selectFirstAvailable: true
      multiSelect: true
      min: 1
      max: 5
      filter:
        isActive: true

    - caption: Environment
      type: envname
      name: envName
      dependsOn: region
      randomName: true
      showFullDomain: false
      required: true

    - caption: Advanced Features
      type: displayfield
      name: displayfield
      markup:
 
    - caption: Install Lightning-Fast Premium CDN with 165+ PoPs
      type: checkbox
      name: cdn_addon
      value: true
      disabled: false
      
    - type: displayfield
      hideLabel: true
      hidden: true
      name: bl_count   
      value: 1
      markup:

globals:
  wp_cluster_url: https://raw.githubusercontent.com/sych74/wordpress-cluster/v3.0.0
  db_cluster_url: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v2.4.0
  galera_server_id: ${fn.random}
  db_user: jelastic-${fn.random}
  db_pass: ${fn.password(10)}
  db_host: sqldb
  protocol: http
  wp_admin_pass: ${fn.password(10)}
  ls_admin_pass: ${fn.password(10)}
  success: default
  email: default

onInstall:
  - initGlobals
  - setGlobals:
      domain: ${settings.envName}-1.${globals.domain-1}
  - createEnvs
  - installEnvsManager
  
  - if (('${settings.le_addon:false}' == 'true') || ('${settings.cdn_addon:false}' == 'true')):
    - if ('${settings.le_addon:false}' == 'true'):
      - setGlobals:
          protocol: https      
    - script: |
        var actions = [];
        if ('${settings.le_addon:false}' == 'true')
          actions.push({
            jps: "https://github.com/jelastic-jps/lets-encrypt/blob/stage/manifest.jps?_r=${fn.random}",
            envName: "${settings.envName}-1",
            nodeGroup: "bl",
            skipEmail: "true",
            settings: {
              customDomains: "${globals.domain}",
              fallbackToX1: "true",
              webroot: "true",
              webrootPath: "/var/www/webroot/ROOT"
            }
          });
        if ('${settings.cdn_addon:false}' == 'true')
          actions.push({
            jps: "https://raw.githubusercontent.com/edgeport/cdn/master/manifest.yml?_r=${fn.random}",
            envName: "${settings.envName}-1",
            nodeGroup: "bl",
            skipEmail: "true",
            settings: {
              note: "${settings.noteCDN:}"
            }
          });
        return { result: 0, onAfterReturn: { install: actions } };


actions:

  initGlobals:
    - script: |
        var regions = '${settings.regions}'.split(','),
            envGroups = eval('(' + MANIFEST + ')').envGroups, index,
            onAfterReturn = { setGlobals: {} }, 
            glbs = onAfterReturn.setGlobals,
            resp, domain;
        resp = jelastic.env.control.GetRegions(appid, session);
        if (resp.result != 0) return resp;
        resp = resp.array;
        for (var i = 0, n = regions.length; i < n; i ++) {
          index = i + 1;
          glbs["region-" + index] = regions[i];
          for (var a = 0, b = resp.length; a < b; a++) {
            for (var k = 0, l = resp[a].hardNodeGroups.length; k < l; k++) {
              if (resp[a].hardNodeGroups[k].uniqueName == regions[i])
                glbs["domain-" + index] = resp[a].domain;
            }
          }
          if (index == 1) {
            glbs["displayName-" + index] = "WP Cluster Master";
            glbs["initial_env_master-" + index] = "true";
          } else {
            glbs["displayName-" + index] = "WP Cluster Slave " + i;
            glbs["initial_env_master-" + index] = "false";
          }
        }
        glbs["envGroups"] = envGroups;
        glbs["regionsCount"] = regions.length;
        glbs["master_env_name"] = "${settings.envName}-1";
        return { result: 0, onAfterReturn: onAfterReturn };

  createEnvs:
    - script: |
        var regions = '${settings.regions}'.split(','),
            actions = [];
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "${baseUrl}/topology.jps?_r=${fn.random}",
            envName: "${settings.envName}-" + cluster,
            loggerName: "${settings.envName}-" + cluster,
            envGroups: "${globals.envGroups}",
            displayName: "${globals.displayName-" + cluster + "}",
            region: "${globals.region-" + cluster + "}",
            settings: {
              waf: "${settings.waf}",
              wp_protect: "${settings.wp_protect}",
              le_addon: "false",
              cdn_addon: "false",
              is_install_wp: "false",
              is_db_cluster: "false",
              bl_count: "1",
              ls_admin_pass: "${globals.ls_admin_pass}",
              glusterfs: "true",
              galera: "${globals.initial_env_master-" + cluster + "}",
              db_user: "${globals.db_user}",
              db_pass: "${globals.db_pass}"
            }  
          });
        }
        return { result: 0, onAfterReturn: { install: actions } };

  installEnvsManager:
    script: |
      var regions = '${settings.regions}'.split(','),
          actions = [];
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
        actions.push({
          jps: "${baseUrl}/envManager.jps?_r=${fn.random}",
          envName: "${settings.envName}-" + cluster,
          settings: {
              wp_cluster_url: "${globals.wp_cluster_url}",
              db_cluster_url: "${globals.db_cluster_url}",
              master_env_name: "${settings.envName}-1",
              galera_server_id: "${globals.galera_server_id}",
              galera_segment_id: cluster,
              db_user: "${globals.db_user}",
              db_pass: "${globals.db_pass}",
              ls_admin_pass: "${globals.ls_admin_pass}",
              envName: "${settings.envName}"
          }
        });
      }
      return { result: 0, onAfterReturn: { install: actions } };

startPage: ${globals.protocol}://${globals.domain}/
