type: install
version: '1.1'
name: WordPress Cluster
categories:
  - apps/clusters
  - apps/content-management
description: Get your highly available and scalable clustered solution for WordPress,
  the extremely popular open source CMS and blogging tool. This package is designed
  to ensure the load tracking and distribution, as well as automatic adjusting the
  amount of allocated resources according to it.
logo: https://raw.githubusercontent.com/jelastic-jps/wordpress-cluster/master/images/wp-cluster.png
baseUrl: https://raw.githubusercontent.com/sych74/wordpress-cluster/master

settings:
  fields:
    - name: wp_title
      caption: WP Title
      type: string
      default: HelloWorld
      required: 'true'
      regex: "^[\\w-.]*$"
      regexText: Incorrect WP Title.

    - type: checkbox
      name: wpmu-addon
      caption: Enable multisite.
      value: false
    
    
nodes:
  - nodeType: mariadb-dockerized
    tag: 10.3.11
    count: 3
    cloudlets: 8
    nodeGroup: sqldb
    displayName: Database
    env:
      ON_ENV_INSTALL: ''

  - nodeType: nginxphp-dockerized
    tag: 1.14.2-php-7.3.1
    count: 2
    cloudlets: 16
    nodeGroup: cp
    displayName: AppServer
    links:
      - sqldb:DB
      - nosqldb:REDIS
    volumes:
      - "/var/www/webroot/ROOT"
      - "/var/ftp/webroot/ROOT"
    volumeMounts:
      "/var/www/webroot/ROOT":
        readOnly: false
        sourcePath: "/data"
        sourceNodeGroup: storage
      "/var/ftp/webroot/ROOT":
        readOnly: false
        sourcePath: "/data"
        sourceNodeGroup: storage
    env:
      PHPFPM_MAX_CHILDREN: 5

  - nodeType: storage
    cloudlets: 8
    nodeGroup: storage
    displayName: Storage

  - nodeType: nginx-dockerized
    tag: 1.14.2
    count: 1
    cloudlets: 8
    nodeGroup: bl
    displayName: Load balancer
    
  - nodeType: redis
    count: 1
    cloudlets: 8
    nodeGroup: nosqldb

onBeforeInit: |  
  var resp = jelastic.billing.account.GetQuotas(appid, session, 'environment.jelasticssl.enabled');
  if (resp.result != 0 ) return resp;  
  return  { result: 0, ssl: !!resp.array[0].value };

onAfterScaleOut[nodeGroup:cp]:
  forEach(event.response.nodes):
    cmd [${@i.id}]: sudo service nginx reload
    setNodeDisplayName [${@i.id}]: AppServer

onAfterScaleOut[nodeGroup:bl]:
  forEach(event.response.nodes):
    setNodeDisplayName [${@i.id}]: Load balancer

globals:
  DB_USER: jelastic-${fn.random}
  DB_PASS: "${fn.password(20)}"
  ADMIN_PASSWD: "${fn.password(20)}"

onInstall:
  - log: Auto Scaling Triggers
  - script: "${baseUrl}/scripts/addTriggers.js"

  - log: Set Node Display Name
  - setNodeDisplayName [bl]: Load balancer
  - setNodeDisplayName [cp]: AppServer
  - setNodeDisplayName [nosqldb]: ObjectCache
  - setNodeDisplayName [storage]: Storage

  - log: DB Galera  Setup
  - installJps:
      jps: https://raw.githubusercontent.com/sych74/mysql-cluster/master/scripts/galera-configuration.jps
      settings:
        path: "https://raw.githubusercontent.com/sych74/mysql-cluster/master"
        db_user: "${globals.DB_USER}"
        db_pass: "${globals.DB_PASS}"
        custom_conf: "${baseUrl}/configs/mysql/wordpress.cnf"
      nodeGroup: sqldb

  - log: CP Layer Setup
  - forEach(nodes.cp):
      setupNode:
        nodeId: "${@i.id}"

  - log: Download and Unpack latest WordPress release
  - cmd[storage]: 
      - wget -qO- 'https://wordpress.org/latest.tar.gz' | tar xz -C /tmp && mv /tmp/wordpress/* /data
      - chown 700:700 -Rh /data/
  - log: Setup WordPress
  - installJps:
      jps: "${baseUrl}/scripts/setup-wordpress.jps"
      settings:
        db_host: DB
        db_user: "${globals.DB_USER}"
        db_pass: "${globals.DB_PASS}"
        admin_passwd: "${globals.ADMIN_PASSWD}"
        wp_title: "${settings.wp_title}"

  - log: Plugins install
  - installJps:
      jps: "${baseUrl}/scripts/setup-plugins.jps"
      settings:
        server_webroot: /var/www/webroot/ROOT
        
  - setupRedis
  - setupWPAdditional
  
  
  - if (${settings.wpmu-addon:false}):         
    - api: jelastic.env.control.GetEnvInfo
      envName: ${this.envName}
    - install: 
        jps: https://raw.githubusercontent.com/sych74/wordpress-cluster/master/addon/multisites.jps
        envName: ${this.envName}  

actions:
  setupNode:
  - cmd[${this.nodeId}]: |-
      wget ${baseUrl}/configs/nginx/nginx.conf -O /etc/nginx/nginx.conf
      wget ${baseUrl}/configs/nginx/default.conf -O /etc/nginx/conf.d/default.conf
      wget ${baseUrl}/configs/nginx/fastcgi_cache.conf -O /etc/nginx/conf.d/fastcgi_cache.conf
      wget ${baseUrl}/configs/php/wp-upload.ini -O /etc/php.d/wp-upload.ini
      wget ${baseUrl}/configs/php/opcache.ini -O /etc/php.d/opcache.ini
      wget ${baseUrl}/configs/php/extensions.ini -O /etc/php.d/extensions.ini
      wget ${baseUrl}/configs/php/redis.ini -O /etc/php.d/redis.ini
      sudo service nginx restart
      
  setupRedis:
    - cmd [nosqldb]: cat /etc/redis.conf| tail -1| awk '{print $2}'
    - cmd[${nodes.cp.master.id}]: wp w3-total-cache option set objectcache.redis.password ${response.responses.out} --path=/var/www/webroot/ROOT
    
  cleanFastCGICache:
    cmd[cp]: rm -rf /dev/shm/fastcgi_cache/*
    
  setupWPAdditional:
    - log: Additional configuration for WordPress.
    - cmd[${nodes.cp.master.id}]: |-
        wget ${baseUrl}/configs/wordpress/wp-jelastic.php -O /var/www/webroot/ROOT/wp-jelastic.php
        sed -i "s/.*'wp-settings.php';.*/require_once ABSPATH . 'wp-jelastic.php';\n&/" /var/www/webroot/ROOT/wp-config.php

success: /text/success.md
